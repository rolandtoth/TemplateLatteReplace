<?php namespace ProcessWire;

use \Latte\Engine;
require_once 'latte.php';

/**
 * Latte template engine support for ProcessWire.
 * by Roland Toth (tpr)
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

/**
 * Class TemplateLatteReplace
 *
 * @package ProcessWire
 */
class TemplateLatteReplace extends WireData implements Module, ConfigurableModule
{
    public $cacheDir;
    public $viewsDir;
    public $defaultLayoutFile;
    public $api_var;

    /**
     * Basic information about module
     */
    public static function getModuleInfo()
    {
        return array(
            'title'    => 'Template Latte Replace',
            'summary'  => __('Latte template engine support for ProcessWire.', __FILE__),
            'href'     => '',
            'author'   => 'Roland Toth',
            'version'  => '0.6.1',
            'requires' => 'PHP>=7.0.0, ProcessWire>=3.0.0',
            'autoload' => true,
            'singular' => true,
            'icon'     => 'code'
        );
    }

    /**
     * Default configuration for module
     *
     */
    public static function getDefaultData()
    {
        return array(
            'cacheDir'          => str_replace('ProcessWire\\', '', __CLASS__),
            'api_var'           => 'view',
            'viewsDir'          => '',
            'defaultTextdomain' => '/site/templates/_strings.php',
            'defaultLayoutFile' => '@layout.latte',
            'options'           => array(
                'extraMacros',
                'extraFilters'
                //'useLatteExtension'
            ),
            'fuels'             => array(
                'config',
                'fields',
                'input',
                'languages',
                'log',
                'modules',
                'page',
                'pages',
                'sanitizer',
                'session',
                'templates',
                'user'
            ),
        );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct()
    {
        foreach (self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }

    }

    public function ___uninstall()
    {
        // remove cache dir
        $cacheDir = wire('config')->paths->cache . $this->cacheDir;

        if (wireRmdir($cacheDir, true)) {
            $this->message(__CLASS__ . ': ' . __(' cache directory removed successfully.', __FILE__));
        }
    }

    public function init()
    {
        if(strpos($_SERVER['REQUEST_URI'], $this->wire('config')->urls->admin) === 0) {
            // we are in the admin section so abort!
            return;
        }

        if (in_array('useLatteExtension', $this->options, true)) {
            $this->wire('config')->templateExtension = 'latte';
        }

        // clear cache on clearcache GET param
        if ($this->wire('input')->get->clearcache !== null && $this->wire('user')->isSuperUser()) {

            $cacheDir = wire('config')->paths->cache . $this->cacheDir;

            if (file_exists($cacheDir)) {
                array_map('unlink', glob($cacheDir . '/*'));
            }
        }
    }

    /**
     * Initialize the module and setup hooks
     *
     */
    public function ready()
    {
        /**
         * Set new global api variable.
         * Always added to avoid php error.
         */
        require_once __DIR__ . '/LatteView.php';
        $view = $this->wire($this->api_var, new LatteView());

        $defaultData = self::getDefaultData();

        // add common ProcessWire variables to view files
        foreach ($defaultData['fuels'] as $fuel) {
            $view->$fuel = $this->wire($fuel);
        }

        // for 'savetemp' filter (use as $gettemp() in view files)
        $view->gettemp = $view->temp;

        // add global helper functions for string translation
        require_once __DIR__ . '/global_functions.php';

        // add $view->latte to get the Latte instance
        $view->latte = $this->getLatte();

        if (in_array('extraFilters', $this->options, true)) {
            require_once __DIR__ . '/_filters.php';
        }

        // include macros and filters
        if (in_array('extraMacros', $this->options, true)) {
            require_once __DIR__ . '/_macros.php';
        }

        $this->wire('config')->defaultTextdomain = $this->defaultTextdomain ?: $defaultData['defaultTextdomain'];

        $this->addHookAfter('Page::render', $this, 'hookPageRender');
    }

    private function getViewFile($page) {
        $view = $this->wire($this->api_var);

        $viewFile = isset($view->viewFile) ? $view->viewFile : $page->template;

        // enable template file with/without extension
        $viewFile = str_replace('.latte', '', $viewFile);

        // if first character is "/", set viewRootDir empty
        if (substr($viewFile, 0, 2) === '//') {
            $viewRootDir = '';
            // remove the starting "//" characters
            $viewFile = substr($viewFile, 2);
        } else {
            $viewRootDir = $this->wire('config')->paths->templates . $this->viewsDir . '/';
        }

        $viewRootDir = $this->removeDoubleSlashes($viewRootDir);

        return $viewRootDir . $viewFile . '.latte';
    }

    public function hookPageRender(HookEvent $event)
    {
        $markup = '';
        $page = $event->object;

        if (!file_exists($this->getViewFile($page))) {
            return;
        }

        if (strpos($page->template->filename, '.tpl.php')) {
            return;
        }

        $markup = $this->renderLatteString($page);
        $event->return = $markup;
    }

    /**
     * Get the Latte engine.
     *
     * @return Engine
     */
    public function getLatte()
    {
        if (is_object($this->latte)) {
            return $this->latte;
        }

        $view = $this->wire($this->api_var);
        $paths = $this->wire('config')->paths;

        $latte = new Engine;
        $latte->setTempDirectory($paths->cache . $this->cacheDir);

        // set default layout file (as of Latte 2.4)
	    if ($this->defaultLayoutFile !== '') { // allow for no default layout file
            $latte->addProvider('coreParentFinder', function ($template) use ($paths, $view) {
                if (!$template->getReferenceType()) { // is not referenced, i.e. not included, is not layout itself, â€¦
                    $path = $this->removeDoubleSlashes($paths->templates . '/' . $this->viewsDir . '/' . $this->defaultLayoutFile);

                    return $path;
                }
	        });
	    }

        // make _'string' work in .latte files
        $latte->addFilter('translate', function () {
            return _t(func_get_args());
        });

        $this->latte = $latte;

        return $latte;
    }

    /**
     * @param $templateFile
     *
     * @return string
     */
    public function renderLatteString($templateFile)
    {

        $latte = $this->getLatte();
        $view = $this->wire($this->api_var);

        $markup = $latte->renderToString($this->getViewFile($templateFile), (array)$view);

        if (isset($view->json_encode) && (bool)$view->json_encode) {
            $markup = json_encode($markup, $view->json_encode);
        }

        return $markup;
    }


    public function removeDoubleSlashes($str)
    {
        return str_replace('//', '/', $str);
    }

    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     *
     * @return InputfieldWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data)
    {
        $defaultData = self::getDefaultData();
        $data = array_merge($defaultData, $data);

        // clear cache
        if (wire('input')->post->submit_save_module) {
            if (wire('input')->post->clearCache) {
                $cacheDir = wire('config')->paths->cache . $data['cacheDir'];
                if (file_exists($cacheDir)) {
                    array_map('unlink', glob($cacheDir . '/*'));
                    wire()->message(__CLASS__ . ': ' . __(' cache cleared successfully.', __FILE__));
                }
            }
        }

        // show warning if views directory doesn't exist
        if (!file_exists(wire('config')->paths->templates . $data['viewsDir']) && !wire('input')->post->viewsDir) {
            wire()->warning(__CLASS__ . ': ' . __("views directory doesn't exist: ",
                    __FILE__) . ' "' . $data['viewsDir'] . '" ' . __('in',
                    __FILE__) . ' "' . wire('config')->urls->templates . '"');
        }

        $wrapper = new InputfieldWrapper();

        $fieldName = 'api_var';
        $f = wire('modules')->get('InputfieldText');
        $f->attr('name', $fieldName);
        $f->label = __('API variable', __FILE__);
        $f->description = __('Name of the variable that is passed to the view files.', __FILE__);
        $f->notes = __('Example: `view` (use as $view->myVar = ... in template files.)', __FILE__);
        $f->columnWidth = 34;
        $f->collapsed = Inputfield::collapsedNever;
        $f->value = !empty($data[$fieldName]) ? wire('sanitizer')->varName(trim($data[$fieldName]),
            '/\\') : $defaultData[$fieldName];
        $wrapper->add($f);

        $fieldName = 'viewsDir';
        $f = wire('modules')->get('InputfieldText');
        $f->attr('name', $fieldName);
        $f->label = __('Default directory for views', __FILE__);
        $f->description = __('Directory name for .latte" files (relative to site/templates).', __FILE__);
        $f->notes = __('Example: `views`', __FILE__);
        $f->collapsed = 2;
        $f->columnWidth = 33;
        $f->collapsed = Inputfield::collapsedNever;
        $f->value = !empty($data[$fieldName]) ? trim($data[$fieldName], '/\\') : $defaultData[$fieldName];
        $wrapper->add($f);

        $fieldName = 'defaultLayoutFile';
        $f = wire('modules')->get('InputfieldText');
        $f->attr('name', $fieldName);
        $f->label = __('Default layout file', __FILE__);
        $f->description = __('The base layout file that all views will use.', __FILE__);
        $f->notes = __('Example: `@layout.latte` or `layouts/@default.latte`', __FILE__);
        $f->collapsed = 2;
        $f->columnWidth = 33;
        $f->collapsed = Inputfield::collapsedNever;
        $f->value = trim($data[$fieldName], '/\\');
        $wrapper->add($f);

        $fieldName = 'defaultTextdomain';
        $f = wire('modules')->get('InputfieldText');
        $f->attr('name', $fieldName);
        $f->label = __('Default textdomain', __FILE__);
        $f->description = __('The default textdomain file used for translations.', __FILE__);
        $f->notes = __('Default: `/site/templates/_strings.php`', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->value = !empty($data[$fieldName]) ? trim($data[$fieldName], '/\\') : $defaultData[$fieldName];
        $wrapper->add($f);

        $fieldName = 'options';
        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->name = $fieldName;
        $f->label = __('Options', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('extraMacros', __('Load additional macros', __FILE__) . ' `(n:page, n:pages, etc.)`');
        $f->addOption('extraFilters', __('Load additional filters', __FILE__) . ' `(getPage`, `getPages`, `etc.)`');
        $f->addOption('useLatteExtension',
            __('Use `latte` extension - Does not affect pages under the admin tree.', __FILE__));

        if (isset($data[$fieldName])) {
            $f->attr('value', $data[$fieldName]);
        }
        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->attr('name', 'clearCache');
        $f->label = __('Clear cache', __FILE__);
        $f->description = __('If checked, Latte cache will be cleared on saving the module.', __FILE__);
        $f->notes = __('You can also use the clearcache GET parameter to clear the cache (SuperUser only)', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 34;
        $wrapper->add($f);

        return $wrapper;
    }
}
